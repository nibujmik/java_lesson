package koreait.day16;

import java.io.File;			
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;


//Exception 처리 명령이 별도 메소드에서 정의될 때 다른 방법 : 
public class C68_FileReadWrite {
	
	//main메소드가 throws Exception 한다면 jvm에게 넘김 처리 내용은 printStackTrace 결과와 동일
	public static void main(String[] args) {

		
		String filename ="C:\\Users\\gram\\Desktop\\iclass05\\자바테스트0617.txt";
		try {
			fileWrite2(filename);
		//	filename ="C:\\Users\\gram\\Desktop\\iclass05\\자바테스트0618.txt"; //없는 파일 테스트 용
			fileRead(filename);
		} catch (FileNotFoundException e) {
			System.out.println("사용자 실행 오류: "+e.getMessage());
			System.out.println("파일이 존재하는지 확인 하세요.");
		}
		
		
		
	}

	public static void fileWrite(String filename) {
File file = new File(filename);
		
		//PrintWriter: 출력 기능을 갖는 클래스
		//Unhandled exception type FileNotFoundException : 오류의 가능성이 있으므로 try ~catch 필요함
		PrintWriter pw=null;
		try {
		    pw = new PrintWriter(file);  
			pw.println("모모 90 89 82");
			pw.println("다현 90 89 82");
			pw.println("나연 90 89 82");
			
			System.out.println("파일 출력이 완료되었습니다.");  //System.out :표준출력 (콘솔 출력)
		} catch (FileNotFoundException e) {
			//출력 기능에는 파일이 없으면 자동으로 파일이 만들어짐. 
			System.out.println("사용자 오류 발생 : "+e.getMessage());
			
		}finally {
			
			pw.close();
		}
		
	}
	//방법1: Exception을 try~catch로 직접처리
	
	public static void fileWrite2(String filename) throws FileNotFoundException {
		File file = new File(filename);
		
		PrintWriter pw=null;
		
	    pw = new PrintWriter(file);  
		pw.println("모모 90 89 82");
		pw.println("다현 90 89 82");
		pw.println("나연 90 89 82");
		
		System.out.println("파일 출력이 완료되었습니다."); 
	
		pw.close();
		
}
	//방법2: throws키워드는 해당 Exception을 호출한 곳으로 넘긴다.
		//		throws뒤에 , 로 구분해서 여러개를 지정할 수 있음
		//		Exception 처리해야 할 메소드가 많이 정의되고 사용될 때 한 곳에서 모두 처리할 수 있습니다.
	public static void fileRead(String filename) throws FileNotFoundException {
		File file = new File(filename);
		Scanner sc = new Scanner(file);
		while(sc.hasNext()) {
			System.out.println(sc.nextLine());
		}
		sc.close();
	}

}